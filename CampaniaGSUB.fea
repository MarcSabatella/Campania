# Campania

# GSUB definitions

# symbol lookups

lookup liga_symbols {
    sub b' b' @roots by doubleflat;
    sub b' b' @intervals by doubleflat;
    sub @roots b' b' by doubleflatsuperior;
    sub @roots @quality b' b' by doubleflatsuperior;
    sub @intervalssuperior b' b' by doubleflatsuperior;
    sub @intervalssubscript b' b' by doubleflatsuperior;
    sub numbersign' numbersign' by doublesharp;
    sub x' @roots by doublesharp;
} liga_symbols;

lookup liga_inversions {
    sub [ @roots @quality ] seven' five' three' by sevenfivethree;
    sub [ @roots @quality ] six' five' three' by sixfivethree;
    sub [ @roots @quality ] six' four' three' by sixfourthree;
    sub [ @roots @quality ] six' four' two' by sixfourtwo;
} liga_inversions;

lookup leading {
    sub @accidentalsraw' @roots by @accidentals;
#    sub @accidentalsraw' @nashville by @accidentals;
    sub slash @accidentalsraw' by @accidentals;
} leading;

lookup trailing {
    sub @roots o' by degree;
    sub @roots zero' by degreeslash;
    sub @roots [ t asciicircum ]' by triangle;
} trailing;

# interval and inversion lookups

lookup intervals_1 {
        sub @roots @intervals' by @intervalssuperior;           # superscript interval after root
        sub @roots @quality @intervals' by @intervalssuperior;  # superscript interval after quality
} intervals_1;

lookup intervals_2 {
    ignore sub onesuperior onesuperior @intervals';             # do not allow three-digit numbers
    sub onesuperior @intervals' by @intervalssuperior;          # allow two digit numbers
} intervals_2;

lookup inversion_3 {
# use @intervalssupersuper rather than GPOS
#    sub @intervalssuperior @intervals' @intervals by @intervalssuperior;    # set up stack of three intervals (superscript, superscript, subscript)
    sub @intervalssuperior' @intervals @intervals by @intervalssupersuper;
    sub @intervalssupersuper @intervals' @intervals by @intervalssuperior;
} inversion_3;

lookup inversion_2 {
    sub @intervalssuperior @intervals' by @intervalssubscript;  # set up stack of two intervals (superscript, subscript)
    sub [ hyphen equal ] @intervals' by @intervalssuperior;     # superscript after hyphen
} inversion_2;

# alteration lookups

lookup alterations {
    sub @intervalssuperior @accidentalsraw' by @accidentalssuperior;
    sub @intervalssubscript @accidentalsraw' by @accidentalssuperior;
    sub @accidentalssuperior @intervals' by @intervalssuperior;
    sub @roots @accidentalsraw' by @accidentalssuperior;
    sub @roots @quality @accidentalsraw' by @accidentalssuperior;
} alterations;

lookup resolutions {
    sub @intervalssuperior hyphen' by hyphensuperior;
    sub @intervalssubscript hyphen' by hyphensuperior hyphensubscript;
    sub @intervalssubscript equal' by hyphensuperior hyphensubscript;
    sub hyphensuperior @intervals' by @intervalssuperior;
    sub hyphensubscript @intervals' by @intervalssuperior;
} resolutions;

#lookup inversion_1 {
#    sub @accidentalsraw' @intervals by @accidentals;
#} inversion_1;

feature liga {
    lookup liga_symbols;
    lookup liga_inversions;
} liga;

feature calt {
    lookup leading;
    lookup trailing;
    lookup intervals_1;
    lookup intervals_2;
    lookup inversion_3;
    lookup inversion_2;
    lookup alterations;
    lookup resolutions;
#    lookup inversion_1;
} calt;
